import time
import numpy as np

# Generate cities and coordinates
def generate_cities(n):
    return np.random.rand(n, 2)

def distance(city1, city2):
    return np.linalg.norm(city1 - city2)

def total_distance(route, cities):
    return sum(distance(cities[route[i]], cities[route[i + 1]]) for i in range(len(route) - 1)) + distance(cities[route[-1]], cities[route[0]])

def greedy_best_first_search(cities):
    n = len(cities)
    unvisited = list(range(n))
    route = [unvisited.pop(0)]  

    while unvisited:
        last_visited = route[-1]
        nearest_city = min(unvisited, key=lambda city: distance(cities[last_visited], cities[city]))
        route.append(nearest_city)
        unvisited.remove(nearest_city)
    
    return route

def run_algorithms():
    n = 10  
    cities = generate_cities(n)

    start_time = time.time()
    gbfs_route = greedy_best_first_search(cities)
    gbfs_distance = total_distance(gbfs_route, cities)
    gbfs_time = time.time() - start_time
    print(f"GBFS Route: {gbfs_route} | Distance: {gbfs_distance:.2f} | Time: {gbfs_time:.4f} seconds")
    
if __name__ == "__main__":
    run_algorithms()
