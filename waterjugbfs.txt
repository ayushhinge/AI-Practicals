from collections import deque

def water_jug_bfs(capacity_x, capacity_y, target_z):
    visited = set()  # To track visited states
    queue = deque([(0, 0)])  # Start with both jugs empty
    path = {}  # To track the path for backtracking

    while queue:
        x, y = queue.popleft()
        print(f"Current State: ({x}, {y})")

        if x == target_z or y == target_z:
            print(f"Reached target: ({x}, {y})")
            print("\nPath to solution:")
            while (x, y) in path:
                print(f"← {path[(x, y)]}")
                x, y = path[(x, y)]
            return

        if (x, y) in visited:
            continue

        visited.add((x, y))

        # Generate possible next states
        possible_states = [
            (capacity_x, y),  # Fill Jug X
            (x, capacity_y),  # Fill Jug Y
            (0, y),  # Empty Jug X
            (x, 0),  # Empty Jug Y
            (x - min(x, capacity_y - y), y + min(x, capacity_y - y)),  # Pour X → Y
            (x + min(y, capacity_x - x), y - min(y, capacity_x - x))   # Pour Y → X
        ]

        for state in possible_states:
            if state not in visited:
                queue.append(state)
                path[state] = (x, y)  # Track how we reached this state

# Example usage
capacity_x = 4
capacity_y = 3
target_z = 2

water_jug_bfs(capacity_x, capacity_y, target_z)
