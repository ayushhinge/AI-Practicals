# Rule-Based System for Choosing a Sorting Algorithm

def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr

def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[0]
    left = [x for x in arr[1:] if x <= pivot]
    right = [x for x in arr[1:] if x > pivot]
    return quick_sort(left) + [pivot] + quick_sort(right)

# Rule-based Reasoning System
def choose_sort_algorithm(data):
    n = len(data)
    is_sorted = all(data[i] <= data[i + 1] for i in range(n - 1))

    print(f"Knowledge Base: Size = {n}, Already Sorted = {is_sorted}")

    if is_sorted:
        print("Reasoning: Already sorted → No sorting needed.")
        return data

    if n < 10:
        print("Reasoning Rule: Small input → Use Insertion Sort")
        return insertion_sort(data)
    elif n < 100:
        print("Reasoning Rule: Medium input → Use Bubble Sort")
        return bubble_sort(data)
    else:
        print("Reasoning Rule: Large input → Use Quick Sort")
        return quick_sort(data)

# Main Function
def main():
    # Test data
    data = [34, 2, 78, 12, 45, 22]
    print("Original Data:", data)

    sorted_data = choose_sort_algorithm(data)
    print("Sorted Data:", sorted_data)

main()
